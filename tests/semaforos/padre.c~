#include <stdio.h>
#include <unistd.h>

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>

int inicializar(int valor,const char* path);
void signal(int id);
void wait(int id);

int main(){
	int id1 = inicializar(1,"padre.c");		// creo el semaforo 
	int id2 = inicializar(1,"Makefile");		// creo el semaforo 
	
	int pid = fork();
	if(pid == 0){
		printf("A1\n");
		signal(id2);			// habilito al otro
		wait(id1);			// si el otro me habilito, sigo
		printf("A2\n");
	}else{
		printf("B1\n");
		signal(id1);			// habilito al otro
		wait(id2);			// si el otro me habilito, sigo
		printf("B2\n");
	}

		sleep(2);			// problema, si se elimina el semaforo antes de tiempo
						// el otro proceso puede quedar colgado

		semctl(id2,0,IPC_RMID);		// elimino el semaforo2			
		semctl(id1,0,IPC_RMID);		// elimino el semaforo1			
	return 0;
}

int inicializar(int valor,const char* path){
	int key = ftok(path,1);			// genero clave
	int id = semget(key,1,IPC_CREAT|0666);	// genero semaforo
	
	int semaforo = 0;			// inicializo valor 
						// (no es necesario usar la union, con un int alcanza)
	semctl(id,0,SETVAL,semaforo);		// inicializo el semaforo
	return id;
}

void signal(int id){
	struct sembuf op;
	op.sem_num = 0;
	op.sem_op = 1;
	op.sem_flg = SEM_UNDO;

	semop(id,&op,1);
}

void wait(int id){
	struct sembuf op;
	op.sem_num = 0;
	op.sem_op = -1;
	op.sem_flg = SEM_UNDO;

	semop(id,&op,1);
}












